// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { APIResource } from '../resource';
import { isRequestOptions } from '../core';
import * as Core from '../core';
import { type Response } from '../_shims/index';

export class FeeUploadFiles extends APIResource {
  /**
   * Returns the fee upload file record for the provided ID.
   */
  retrieve(
    id: number,
    query?: FeeUploadFileRetrieveParams,
    options?: Core.RequestOptions,
  ): Core.APIPromise<FeeUploadFileRetrieveResponse>;
  retrieve(id: number, options?: Core.RequestOptions): Core.APIPromise<FeeUploadFileRetrieveResponse>;
  retrieve(
    id: number,
    query: FeeUploadFileRetrieveParams | Core.RequestOptions = {},
    options?: Core.RequestOptions,
  ): Core.APIPromise<FeeUploadFileRetrieveResponse> {
    if (isRequestOptions(query)) {
      return this.retrieve(id, {}, query);
    }
    return this._client.get(`/billing/fee-upload-files/${id}`, { query, ...options });
  }

  /**
   * Return an enveloped list of fee upload files generated by your application.
   */
  list(
    query?: FeeUploadFileListParams,
    options?: Core.RequestOptions,
  ): Core.APIPromise<FeeUploadFileListResponse>;
  list(options?: Core.RequestOptions): Core.APIPromise<FeeUploadFileListResponse>;
  list(
    query: FeeUploadFileListParams | Core.RequestOptions = {},
    options?: Core.RequestOptions,
  ): Core.APIPromise<FeeUploadFileListResponse> {
    if (isRequestOptions(query)) {
      return this.list({}, query);
    }
    return this._client.get('/billing/fee-upload-files', { query, ...options });
  }

  /**
   * Returns the fee upload file .zip archive for the specified ID.
   */
  download(
    id: number,
    params?: FeeUploadFileDownloadParams,
    options?: Core.RequestOptions,
  ): Core.APIPromise<Response>;
  download(id: number, options?: Core.RequestOptions): Core.APIPromise<Response>;
  download(
    id: number,
    params: FeeUploadFileDownloadParams | Core.RequestOptions = {},
    options?: Core.RequestOptions,
  ): Core.APIPromise<Response> {
    if (isRequestOptions(params)) {
      return this.download(id, {}, params);
    }
    const { pager } = params;
    return this._client.post(`/billing/fee-upload-files/download/${id}`, {
      query: { pager },
      ...options,
      __binaryResponse: true,
    });
  }

  /**
   * Returns a filtered list of Fee Upload Files
   */
  filter(
    params?: FeeUploadFileFilterParams,
    options?: Core.RequestOptions,
  ): Core.APIPromise<FeeUploadFileFilterResponse>;
  filter(options?: Core.RequestOptions): Core.APIPromise<FeeUploadFileFilterResponse>;
  filter(
    params: FeeUploadFileFilterParams | Core.RequestOptions = {},
    options?: Core.RequestOptions,
  ): Core.APIPromise<FeeUploadFileFilterResponse> {
    if (isRequestOptions(params)) {
      return this.filter({}, params);
    }
    const { pager, ...body } = params;
    return this._client.post('/billing/fee-upload-files/filter', { query: { pager }, body, ...options });
  }
}

export interface FeeUpload {
  /**
   * The unique resource ID for this Fee Upload File
   */
  id?: number;

  /**
   * Timestamp for when the record was created
   */
  created_at_utc?: string;

  /**
   * The date that this Fee Upload File ends
   */
  end_date?: string;

  /**
   * A list of String file keys for this Fee Upload File
   */
  file_keys?: Array<string>;

  /**
   * The firm ID of the managing firm
   */
  firm_id?: number;

  /**
   * The number of accounts for this Fee Upload File
   */
  num_accounts?: number;

  /**
   * The number of custodians for this Fee Upload File
   */
  num_custodians?: number;

  /**
   * The number of files for this Fee Upload File
   */
  num_files?: number;

  /**
   * The number of households for this Fee Upload File
   */
  num_households?: number;

  /**
   * The total annual debit for this Fee Upload File
   */
  total_annual_debit?: number;

  /**
   * The total period debit for this Fee Upload File
   */
  total_period_debit?: number;

  /**
   * Timestamp for when the record was updated
   */
  updated_at_utc?: string;
}

export type FeeUploads = Array<FeeUpload>;

export interface FeeUploadFileRetrieveResponse {
  current_page?: number;

  data?: FeeUpload;

  has_next?: boolean;

  has_previous?: boolean;

  object?: string;

  page_size_limit?: number;

  total_items?: number;

  total_pages?: number;
}

export interface FeeUploadFileListResponse {
  current_page?: number;

  data?: FeeUploads;

  has_next?: boolean;

  has_previous?: boolean;

  object?: string;

  page_size_limit?: number;

  total_items?: number;

  total_pages?: number;
}

export interface FeeUploadFileFilterResponse {
  current_page?: number;

  data?: FeeUploads;

  has_next?: boolean;

  has_previous?: boolean;

  object?: string;

  page_size_limit?: number;

  total_items?: number;

  total_pages?: number;
}

export interface FeeUploadFileRetrieveParams {
  pager?: FeeUploadFileRetrieveParams.Pager;
}

export namespace FeeUploadFileRetrieveParams {
  export interface Pager {
    /**
     * Number of items to return per page
     */
    limit?: number;

    /**
     * Current page number
     */
    page?: number;
  }
}

export interface FeeUploadFileListParams {
  pager?: FeeUploadFileListParams.Pager;
}

export namespace FeeUploadFileListParams {
  export interface Pager {
    /**
     * Number of items to return per page
     */
    limit?: number;

    /**
     * Current page number
     */
    page?: number;
  }
}

export interface FeeUploadFileDownloadParams {
  pager?: FeeUploadFileDownloadParams.Pager;
}

export namespace FeeUploadFileDownloadParams {
  export interface Pager {
    /**
     * Number of items to return per page
     */
    limit?: number;

    /**
     * Current page number
     */
    page?: number;
  }
}

export interface FeeUploadFileFilterParams {
  /**
   * Query param:
   */
  pager?: FeeUploadFileFilterParams.Pager;

  /**
   * Body param: The unique resource ID for this Fee Upload File
   */
  id?: number;

  /**
   * Body param: The date that this Fee Upload File ends
   */
  end_date?: string;

  /**
   * Body param: The firm ID of the managing firm
   */
  firm_id?: number;

  /**
   * Body param: The number of accounts for this Fee Upload File
   */
  num_accounts?: number;

  /**
   * Body param: The number of custodians for this Fee Upload File
   */
  num_custodians?: number;

  /**
   * Body param: The number of files for this Fee Upload File
   */
  num_files?: number;

  /**
   * Body param: The number of households for this Fee Upload File
   */
  num_households?: number | null;

  /**
   * Body param: The total annual debit for this Fee Upload File
   */
  total_annual_debit?: number | null;

  /**
   * Body param: The total period debit for this Fee Upload File
   */
  total_period_debit?: number | null;
}

export namespace FeeUploadFileFilterParams {
  export interface Pager {
    /**
     * Number of items to return per page
     */
    limit?: number;

    /**
     * Current page number
     */
    page?: number;
  }
}

export declare namespace FeeUploadFiles {
  export {
    type FeeUpload as FeeUpload,
    type FeeUploads as FeeUploads,
    type FeeUploadFileRetrieveResponse as FeeUploadFileRetrieveResponse,
    type FeeUploadFileListResponse as FeeUploadFileListResponse,
    type FeeUploadFileFilterResponse as FeeUploadFileFilterResponse,
    type FeeUploadFileRetrieveParams as FeeUploadFileRetrieveParams,
    type FeeUploadFileListParams as FeeUploadFileListParams,
    type FeeUploadFileDownloadParams as FeeUploadFileDownloadParams,
    type FeeUploadFileFilterParams as FeeUploadFileFilterParams,
  };
}
